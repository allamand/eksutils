# To generate this file you can execute commented lines below.
#POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`AdministratorAccess`].[Arn]' --output text)
#CLUSTER_NAME=eksworkshop-eksctl
#eksctl create iamserviceaccount \
#    --name eksutils-admin \
#    --namespace default \
#    --cluster $CLUSTER_NAME \
#    --attach-policy-arn $POLICY_ARN \
#    --approve \
#    --override-existing-serviceaccounts
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<account_id>:role/<Role_Name>
  name: k8s-101-role
  namespace: default
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
metadata:
    name: eksutils-deployment
    namespace: default
    labels: 
      app: toolbox
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: toolbox
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels: 
        app: toolbox
    spec:
      containers:
      - name: eksutils
        image: allamand/eksutils:latest
        imagePullPolicy: Always
        command:
          - tail
          - -f
          - /dev/null
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: k8s-101-role
      serviceAccountName: k8s-101-role
      terminationGracePeriodSeconds: 0
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8s-101-role
subjects:
- kind: ServiceAccount
  name: k8s-101-role
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

